
#doctest.7-base_geometry.py



>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> B = BaseGeometry()

Function to be test:
area(self)
integer_validator(self, name, value)

Functions that work:

* testing if integer_validator has a value positive value:
>>> B.integer_validator("age", 4)


Errors functions:

* test area error:
>>> B.area()
Traceback (most recent call last):
Exception: area() is not implemented

* testing if integer_validator is empty:
>>> B.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

* testing if integer_validator doesn't have value:
>>> B.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

* testing if integer_validator has a negative value:
>>> B.integer_validator("age", -5)
Traceback (most recent call last):
ValueError: age must be greater than 0

* testing if integer_validator has a value equal to 0:
>>> B.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

* testing with a value that is a list:
>>> B.integer_validator("age", {4, 6})
Traceback (most recent call last):
TypeError: age must be an integer

* testing if a value is True:
>>> B.integer_validator("age", True)
Traceback (most recent call last):
TypeError: age must be an integer


